diff -Naur nova.orig/nova/api/openstack/contrib/floating_ips.py nova/nova/api/openstack/contrib/floating_ips.py
--- nova.orig/nova/api/openstack/contrib/floating_ips.py	2011-08-26 02:50:56.000000000 +0300
+++ nova/nova/api/openstack/contrib/floating_ips.py	2011-09-22 13:26:42.000000000 +0300
@@ -36,9 +36,9 @@
         result['fixed_ip'] = floating_ip['fixed_ip']['address']
     except (TypeError, KeyError):
         result['fixed_ip'] = None
-    if 'instance' in floating_ip:
-        result['instance_id'] = floating_ip['instance']['id']
-    else:
+    try:
+        result['instance_id'] = floating_ip['fixed_ip']['instance_id']
+    except (TypeError, KeyError):
         result['instance_id'] = None
     return {'floating_ip': result}
 
@@ -96,7 +96,8 @@
         except rpc.RemoteError as ex:
             # NOTE(tr3buchet) - why does this block exist?
             if ex.exc_type == 'NoMoreFloatingIps':
-                raise exception.NoMoreFloatingIps()
+                msg = _("No more floating ips available.")
+                raise webob.exc.HTTPBadRequest(explanation=msg)
             else:
                 raise
 
@@ -106,7 +107,7 @@
         context = req.environ['nova.context']
         floating_ip = self.network_api.get_floating_ip(context, id)
 
-        if 'fixed_ip' in floating_ip:
+        if floating_ip.get('fixed_ip'):
             self.network_api.disassociate_floating_ip(context,
                                                       floating_ip['address'])
 
@@ -138,7 +139,13 @@
             msg = _("Address not specified")
             raise webob.exc.HTTPBadRequest(explanation=msg)
 
-        self.compute_api.associate_floating_ip(context, instance_id, address)
+        try:
+            self.compute_api.associate_floating_ip(context, instance_id,
+                                                   address)
+        except exception.ApiError, e:
+            raise webob.exc.HTTPBadRequest(explanation=e.message)
+        except exception.NotAuthorized, e:
+            raise webob.exc.HTTPUnauthorized()
 
         return webob.Response(status_int=202)
 
@@ -156,8 +163,11 @@
             raise webob.exc.HTTPBadRequest(explanation=msg)
 
         floating_ip = self.network_api.get_floating_ip_by_ip(context, address)
-        if 'fixed_ip' in floating_ip:
-            self.network_api.disassociate_floating_ip(context, address)
+        if floating_ip.get('fixed_ip'):
+            try:
+                self.network_api.disassociate_floating_ip(context, address)
+            except exception.NotAuthorized, e:
+                raise webob.exc.HTTPUnauthorized()
 
         return webob.Response(status_int=202)
 
