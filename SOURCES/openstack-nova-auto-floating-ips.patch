diff -Naur nova.rhel.orig/nova/compute/manager.py nova.rhel/nova/compute/manager.py
--- nova.rhel.orig/nova/compute/manager.py	2011-04-19 13:52:13.000000000 +0400
+++ nova.rhel/nova/compute/manager.py	2011-04-19 13:54:57.000000000 +0400
@@ -73,6 +73,8 @@
 flags.DEFINE_integer("rescue_timeout", 0,
                      "Automatically unrescue an instance after N seconds."
                      " Set to 0 to disable.")
+flags.DEFINE_bool('auto_assign_floating_ip', False, 'Autoassigning floating'
+                                                   ' ip to VM')
 
 LOG = logging.getLogger('nova.compute.manager')
 
@@ -244,6 +246,41 @@
                                        instance_id,
                                        power_state.SHUTDOWN)
 
+        if not FLAGS.stub_network:
+            if FLAGS.auto_assign_floating_ip:
+                public_ip = rpc.call(context,
+                                FLAGS.network_topic,
+                                {"method": "allocate_floating_ip",
+                                "args": {"project_id": context.project_id}})
+
+                fixed_ip = self.db.fixed_ip_get_by_address(context, address)
+                floating_ip = self.db.floating_ip_get_by_address(context,
+                                                                 public_ip)
+                # Check if the floating ip address is allocated
+                if floating_ip['project_id'] is None:
+                    raise exception.Error(_("Address (%s) is not allocated") %
+                                               floating_ip['address'])
+                # Check if the floating ip address is allocated
+                # to the same project
+                if floating_ip['project_id'] != context.project_id:
+                    LOG.warn(_("Address (%(address)s) is not allocated to your"
+                               " project (%(project)s)"),
+                               {'address': floating_ip['address'],
+                               'project': context.project_id})
+                    raise exception.Error(_("Address (%(address)s) is not "
+                                            "allocated to your project"
+                                            "(%(project)s)") %
+                                            {'address': floating_ip['address'],
+                                            'project': context.project_id})
+
+                host = fixed_ip['network']['host']
+                rpc.cast(context,
+                         self.db.queue_get_for(context,
+                                               FLAGS.network_topic, host),
+                         {"method": "associate_floating_ip",
+                          "args": {"floating_address": floating_ip['address'],
+                                   "fixed_address": fixed_ip['address']}})
+
         self._update_state(context, instance_id)
 
     @exception.wrap_exception
@@ -271,6 +308,15 @@
                          network_topic,
                          {"method": "disassociate_floating_ip",
                           "args": {"floating_address": address}})
+                if FLAGS.auto_assign_floating_ip \
+                        and floating_ip.get('auto_assigned'):
+                    LOG.debug(_("Deallocating floating ip %s"),
+                                    floating_ip['address'], context=context)
+                    rpc.cast(context,
+                             FLAGS.network_topic,
+                             {"method": "deallocate_floating_ip",
+                              "args": {"floating_address":
+                                                floating_ip['address']}})
 
             address = fixed_ip['address']
             if address:
diff -Naur nova.rhel.orig/nova/db/api.py nova.rhel/nova/db/api.py
--- nova.rhel.orig/nova/db/api.py	2011-04-19 13:52:13.000000000 +0400
+++ nova.rhel/nova/db/api.py	2011-04-19 13:54:57.000000000 +0400
@@ -291,8 +291,13 @@
     return IMPL.floating_ip_update(context, address, values)
 
 
+def floating_ip_set_auto_assigned(context, address):
+    """Set auto_assigned flag to floating ip"""
+    return IMPL.floating_ip_set_auto_assigned(context, address)
+
 ####################
 
+
 def migration_update(context, id, values):
     """Update a migration instance"""
     return IMPL.migration_update(context, id, values)
diff -Naur nova.rhel.orig/nova/db/sqlalchemy/api.py nova.rhel/nova/db/sqlalchemy/api.py
--- nova.rhel.orig/nova/db/sqlalchemy/api.py	2011-04-19 13:52:13.000000000 +0400
+++ nova.rhel/nova/db/sqlalchemy/api.py	2011-04-19 13:54:57.000000000 +0400
@@ -461,6 +461,7 @@
     session = get_session()
     return session.query(models.FloatingIp).\
                    filter_by(project_id=project_id).\
+                   filter_by(auto_assigned=False).\
                    filter_by(deleted=False).\
                    count()
 
@@ -489,6 +490,7 @@
                                                      address,
                                                      session=session)
         floating_ip_ref['project_id'] = None
+        floating_ip_ref['auto_assigned'] = False
         floating_ip_ref.save(session=session)
 
 
@@ -522,6 +524,17 @@
     return fixed_ip_address
 
 
+@require_context
+def floating_ip_set_auto_assigned(context, address):
+    session = get_session()
+    with session.begin():
+        floating_ip_ref = floating_ip_get_by_address(context,
+                                                     address,
+                                                     session=session)
+        floating_ip_ref.auto_assigned = True
+        floating_ip_ref.save(session=session)
+
+
 @require_admin_context
 def floating_ip_get_all(context):
     session = get_session()
@@ -548,6 +561,7 @@
     return session.query(models.FloatingIp).\
                    options(joinedload_all('fixed_ip.instance')).\
                    filter_by(project_id=project_id).\
+                   filter_by(auto_assigned=False).\
                    filter_by(deleted=False).\
                    all()
 
diff -Naur nova.rhel.orig/nova/db/sqlalchemy/migrate_repo/versions/015_add_auto_assign_to_floating_ips.py nova.rhel/nova/db/sqlalchemy/migrate_repo/versions/015_add_auto_assign_to_floating_ips.py
--- nova.rhel.orig/nova/db/sqlalchemy/migrate_repo/versions/015_add_auto_assign_to_floating_ips.py	1970-01-01 03:00:00.000000000 +0300
+++ nova.rhel/nova/db/sqlalchemy/migrate_repo/versions/015_add_auto_assign_to_floating_ips.py	2011-04-19 13:54:57.000000000 +0400
@@ -0,0 +1,36 @@
+# vim: tabstop=4 shiftwidth=4 softtabstop=4
+
+# Copyright 2011 OpenStack LLC.
+# Copyright 2011 Grid Dynamics
+#
+#    Licensed under the Apache License, Version 2.0 (the "License"); you may
+#    not use this file except in compliance with the License. You may obtain
+#    a copy of the License at
+#
+#         http://www.apache.org/licenses/LICENSE-2.0
+#
+#    Unless required by applicable law or agreed to in writing, software
+#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+#    License for the specific language governing permissions and limitations
+#    under the License.
+
+from sqlalchemy import *
+from sqlalchemy.sql import text
+from migrate import *
+
+
+meta = MetaData()
+
+c_auto_assigned = Column('auto_assigned', Boolean, default=False)
+
+
+def upgrade(migrate_engine):
+    # Upgrade operations go here. Don't create your own engine;
+    # bind migrate_engine to your metadata
+    meta.bind = migrate_engine
+
+    floating_ips = Table('floating_ips', meta, autoload=True,
+                      autoload_with=migrate_engine)
+
+    floating_ips.create_column(c_auto_assigned)
diff -Naur nova.rhel.orig/nova/db/sqlalchemy/models.py nova.rhel/nova/db/sqlalchemy/models.py
--- nova.rhel.orig/nova/db/sqlalchemy/models.py	2011-04-19 13:52:13.000000000 +0400
+++ nova.rhel/nova/db/sqlalchemy/models.py	2011-04-19 13:54:57.000000000 +0400
@@ -592,6 +592,7 @@
                                 'FloatingIp.deleted == False)')
     project_id = Column(String(255))
     host = Column(String(255))  # , ForeignKey('hosts.id'))
+    auto_assigned = Column(Boolean, default=False, nullable=False)
 
 
 class ConsolePool(BASE, NovaBase):
diff -Naur nova.rhel.orig/nova/network/api.py nova.rhel/nova/network/api.py
--- nova.rhel.orig/nova/network/api.py	2011-04-19 13:52:13.000000000 +0400
+++ nova.rhel/nova/network/api.py	2011-04-19 13:54:57.000000000 +0400
@@ -53,6 +53,8 @@
 
     def release_floating_ip(self, context, address):
         floating_ip = self.db.floating_ip_get_by_address(context, address)
+        if floating_ip.get('auto_assigned'):
+            return
         # NOTE(vish): We don't know which network host should get the ip
         #             when we deallocate, so just send it to any one.  This
         #             will probably need to move into a network supervisor
@@ -66,6 +68,8 @@
         if isinstance(fixed_ip, str) or isinstance(fixed_ip, unicode):
             fixed_ip = self.db.fixed_ip_get_by_address(context, fixed_ip)
         floating_ip = self.db.floating_ip_get_by_address(context, floating_ip)
+        if floating_ip.get('auto_assigned'):
+            return
         # Check if the floating ip address is allocated
         if floating_ip['project_id'] is None:
             raise exception.ApiError(_("Address (%s) is not allocated") %
@@ -92,6 +96,8 @@
 
     def disassociate_floating_ip(self, context, address):
         floating_ip = self.db.floating_ip_get_by_address(context, address)
+        if floating_ip.get('auto_assigned'):
+            return
         if not floating_ip.get('fixed_ip'):
             raise exception.ApiError('Address is not associated.')
         # NOTE(vish): Get the topic from the host name of the network of
