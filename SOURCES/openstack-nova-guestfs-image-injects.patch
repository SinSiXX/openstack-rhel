diff -Naur nova-2011.1.orig/nova/utils.py nova-2011.1/nova/utils.py
--- nova-2011.1.orig/nova/utils.py	2011-02-18 14:46:14.000000000 +0300
+++ nova-2011.1/nova/utils.py	2011-02-24 16:44:12.000000000 +0300
@@ -25,7 +25,6 @@
 import json
 import os
 import random
-import subprocess
 import socket
 import struct
 import sys
@@ -36,6 +35,7 @@
 
 from eventlet import event
 from eventlet import greenthread
+from eventlet.green import subprocess
 
 from nova import exception
 from nova.exception import ProcessExecutionError
@@ -161,7 +161,7 @@
     return os.path.abspath(nova.__file__).split('nova/__init__.pyc')[0]
 
 
-def default_flagfile(filename='nova.conf'):
+def default_flagfile(filename='/etc/nova/nova.conf'):
     for arg in sys.argv:
         if arg.find('flagfile') != -1:
             break
diff -Naur nova-2011.1.orig/nova/virt/disk.py nova-2011.1/nova/virt/disk.py
--- nova-2011.1.orig/nova/virt/disk.py	2011-02-18 14:46:14.000000000 +0300
+++ nova-2011.1/nova/virt/disk.py	2011-02-24 16:42:24.000000000 +0300
@@ -23,10 +23,8 @@
 """
 
 import os
-import tempfile
-import time
+import guestfs
 
-from nova import exception
 from nova import flags
 from nova import log as logging
 from nova import utils
@@ -52,135 +50,27 @@
 
 
 def inject_data(image, key=None, net=None, partition=None, nbd=False):
-    """Injects a ssh key and optionally net data into a disk image.
-
-    it will mount the image as a fully partitioned disk and attempt to inject
-    into the specified partition number.
-
-    If partition is not specified it mounts the image as a single partition.
-
-    """
-    device = _link_device(image, nbd)
+    """Injects a ssh key and optionally net data into a disk image."""
+    g = guestfs.GuestFS()
     try:
-        if not partition is None:
-            # create partition
-            out, err = utils.execute('sudo kpartx -a %s' % device)
-            if err:
-                raise exception.Error(_('Failed to load partition: %s') % err)
-            mapped_device = '/dev/mapper/%sp%s' % (device.split('/')[-1],
-                                                   partition)
-        else:
-            mapped_device = device
-
-        # We can only loopback mount raw images. If the device isn't there,
-        # it's normally because it's a .vmdk or a .vdi etc
-        if not os.path.exists(mapped_device):
-            raise exception.Error('Mapped device was not found (we can'
-                                  ' only inject raw disk images): %s' %
-                                  mapped_device)
-
-        # Configure ext2fs so that it doesn't auto-check every N boots
-        out, err = utils.execute('sudo tune2fs -c 0 -i 0 %s' % mapped_device)
-
-        tmpdir = tempfile.mkdtemp()
-        try:
-            # mount loopback to dir
-            out, err = utils.execute(
-                    'sudo mount %s %s' % (mapped_device, tmpdir))
-            if err:
-                raise exception.Error(_('Failed to mount filesystem: %s')
-                                      % err)
-
-            try:
-                if key:
-                    # inject key file
-                    _inject_key_into_fs(key, tmpdir)
-                if net:
-                    _inject_net_into_fs(net, tmpdir)
-            finally:
-                # unmount device
-                utils.execute('sudo umount %s' % mapped_device)
-        finally:
-            # remove temporary directory
-            utils.execute('rmdir %s' % tmpdir)
-            if not partition is None:
-                # remove partitions
-                utils.execute('sudo kpartx -d %s' % device)
+        LOG.debug(_("Mounting disk..."))
+        g.add_drive(image)
+        g.launch()
+        devices = g.inspect_os()
+        g.mount(devices[0],"/")
+        if key:
+            LOG.debug(_("Injecting key..."))
+            g.mkdir_p("/root/.ssh/")
+            path = "/root/.ssh/authorized_keys"
+            g.write(path, key)
+            g.chmod(0600, path)
+        if net:
+            LOG.debug(_("Injecting network..."))
+            path = "/etc/sysconfig/network-scripts/ifcfg-eth0"
+            g.write(path, net)
+    except Exception as e:
+        LOG.exception(e)
+        raise
     finally:
-        _unlink_device(device, nbd)
-
-
-def _link_device(image, nbd):
-    """Link image to device using loopback or nbd"""
-    if nbd:
-        device = _allocate_device()
-        utils.execute('sudo qemu-nbd -c %s %s' % (device, image))
-        # NOTE(vish): this forks into another process, so give it a chance
-        #             to set up before continuuing
-        for i in xrange(10):
-            if os.path.exists("/sys/block/%s/pid" % os.path.basename(device)):
-                return device
-            time.sleep(1)
-        raise exception.Error(_('nbd device %s did not show up') % device)
-    else:
-        out, err = utils.execute('sudo losetup --find --show %s' % image)
-        if err:
-            raise exception.Error(_('Could not attach image to loopback: %s')
-                                  % err)
-        return out.strip()
-
-
-def _unlink_device(device, nbd):
-    """Unlink image from device using loopback or nbd"""
-    if nbd:
-        utils.execute('sudo qemu-nbd -d %s' % device)
-        _free_device(device)
-    else:
-        utils.execute('sudo losetup --detach %s' % device)
-
-
-_DEVICES = ['/dev/nbd%s' % i for i in xrange(16)]
-
-
-def _allocate_device():
-    # NOTE(vish): This assumes no other processes are allocating nbd devices.
-    #             It may race cause a race condition if multiple
-    #             workers are running on a given machine.
-    while True:
-        if not _DEVICES:
-            raise exception.Error(_('No free nbd devices'))
-        device = _DEVICES.pop()
-        if not os.path.exists("/sys/block/%s/pid" % os.path.basename(device)):
-            break
-    return device
-
-
-def _free_device(device):
-    _DEVICES.append(device)
-
-
-def _inject_key_into_fs(key, fs):
-    """Add the given public ssh key to root's authorized_keys.
-
-    key is an ssh key string.
-    fs is the path to the base of the filesystem into which to inject the key.
-    """
-    sshdir = os.path.join(fs, 'root', '.ssh')
-    utils.execute('sudo mkdir -p %s' % sshdir)  # existing dir doesn't matter
-    utils.execute('sudo chown root %s' % sshdir)
-    utils.execute('sudo chmod 700 %s' % sshdir)
-    keyfile = os.path.join(sshdir, 'authorized_keys')
-    utils.execute('sudo tee -a %s' % keyfile, '\n' + key.strip() + '\n')
-
-
-def _inject_net_into_fs(net, fs):
-    """Inject /etc/network/interfaces into the filesystem rooted at fs.
-
-    net is the contents of /etc/network/interfaces.
-    """
-    netdir = os.path.join(os.path.join(fs, 'etc'), 'network')
-    utils.execute('sudo mkdir -p %s' % netdir)  # existing dir doesn't matter
-    utils.execute('sudo chown root:root %s' % netdir)
-    utils.execute('sudo chmod 755 %s' % netdir)
-    netfile = os.path.join(netdir, 'interfaces')
-    utils.execute('sudo tee %s' % netfile, net)
+        LOG.debug(_("Deleting guestfs object..."))
+        del(g)
